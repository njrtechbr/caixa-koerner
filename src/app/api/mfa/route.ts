import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { prisma } from '@/lib/database'
import { setupMFA, verifyTOTP } from '@/lib/mfa'
import { encryptData, hashBackupCode } from '@/lib/security'

/**
 * API para configurar MFA/TOTP
 * Gera QR Code e c√≥digos de backup para um usu√°rio
 */

// Configurar MFA para o usu√°rio
export async function POST(request: NextRequest) {
  try {
    // TEMPOR√ÅRIO: Permitir teste sem autentica√ß√£o durante desenvolvimento
    const isDev = process.env.NODE_ENV === 'development'
    
    // Verificar autentica√ß√£o
    const session = await getServerSession(authOptions)
    
    if (!isDev && !session?.user?.id) {
      return NextResponse.json(
        { erro: 'N√£o autenticado' },
        { status: 401 }
      )
    }

    // Para desenvolvimento, usar um usu√°rio de teste se n√£o houver sess√£o
    let userId = session?.user?.id
    let userEmail = session?.user?.email || 'test@koerner.com'
    let userName = 'Usu√°rio Teste'

    if (isDev && !session?.user?.id) {
      console.log('üß™ Modo desenvolvimento: usando dados de teste')
      // Gerar dados MFA apenas para teste
      const mfaData = await setupMFA(userEmail)
      
      console.log('‚úÖ QR Code gerado (teste), URL length:', mfaData.qrCodeDataUrl.length)
      console.log('‚úÖ Backup codes gerados (teste):', mfaData.backupCodes.length)

      return NextResponse.json({
        sucesso: true,
        desenvolvimento: true,
        dados: {
          qrCodeDataUrl: mfaData.qrCodeDataUrl,
          backupCodes: mfaData.backupCodes,
          email: userEmail
        },
        mensagem: 'Teste MFA - QR Code gerado para desenvolvimento'
      })
    }    // Buscar dados do usu√°rio
    const usuario = await prisma.usuario.findUnique({
      where: { id: userId! },
      select: {
        id: true,
        nome: true,
        email: true,
        isMfaEnabled: true
      }
    })

    console.log('üë§ Usu√°rio encontrado:', usuario ? `${usuario.nome} (${usuario.email})` : 'N√£o encontrado')

    if (!usuario) {
      console.log('‚ùå Erro: Usu√°rio n√£o encontrado no banco de dados')
      return NextResponse.json(
        { erro: 'Usu√°rio n√£o encontrado' },
        { status: 404 }
      )
    }    // Se MFA j√° est√° habilitado, retornar informa√ß√£o sobre status
    if (usuario.isMfaEnabled) {
      console.log('‚ö†Ô∏è MFA j√° est√° habilitado para este usu√°rio')
      return NextResponse.json({
        sucesso: true,
        jaConfigurado: true,
        mensagem: 'MFA j√° est√° configurado e ativo para este usu√°rio',
        dados: {
          email: usuario.email,
          nome: usuario.nome
        }
      })
    }

    console.log('üöÄ Gerando dados MFA...')
    // Gerar dados MFA
    const mfaData = await setupMFA(usuario.email)
    console.log('‚úÖ QR Code gerado, secret length:', mfaData.secret.length)
    console.log('‚úÖ Backup codes gerados:', mfaData.backupCodes.length)
    
    // Criptografar secret antes de salvar
    const encryptedSecret = encryptData(mfaData.secret)    // Hash dos c√≥digos de backup e salvar na tabela separada
    const backupCodePromises = mfaData.backupCodes.map(async (code) => {
      const hashedCode = await hashBackupCode(code)
      return { usuarioId: session!.user.id, codeHash: hashedCode }
    })
    const backupCodeData = await Promise.all(backupCodePromises)

    // Salvar dados MFA temporariamente (ser√° ativado ap√≥s verifica√ß√£o)
    await prisma.$transaction(async (tx) => {
      // Atualizar usu√°rio com secret MFA
      await tx.usuario.update({
        where: { id: session!.user.id },
        data: {
          mfaSecret: encryptedSecret
          // isMfaEnabled permanece false at√© verifica√ß√£o
        }
      })

      // Criar c√≥digos de backup
      await tx.usuarioBackupCode.createMany({
        data: backupCodeData
      })
    })    // Log da opera√ß√£o
    console.log(`‚úÖ Setup MFA iniciado para usu√°rio ${usuario.nome} (${session!.user.id})`)

    return NextResponse.json({
      sucesso: true,
      dados: {
        qrCodeDataUrl: mfaData.qrCodeDataUrl,
        backupCodes: mfaData.backupCodes,
        email: usuario.email
      },
      mensagem: 'QR Code gerado. Configure seu aplicativo autenticador e confirme com um c√≥digo.'
    })

  } catch (error) {
    console.error('‚ùå Erro ao configurar MFA:', error)
    return NextResponse.json(
      { erro: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

// Ativar MFA ap√≥s verifica√ß√£o do c√≥digo
export async function PUT(request: NextRequest) {
  try {
    // Verificar autentica√ß√£o
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { erro: 'N√£o autenticado' },
        { status: 401 }
      )
    }

    const body = await request.json()
    const { mfaCode } = body

    if (!mfaCode || !/^\d{6}$/.test(mfaCode)) {
      return NextResponse.json(
        { erro: 'C√≥digo MFA inv√°lido' },
        { status: 400 }
      )
    }

    // Buscar dados do usu√°rio
    const usuario = await prisma.usuario.findUnique({
      where: { id: session.user.id },
      select: {
        id: true,
        nome: true,
        email: true,
        isMfaEnabled: true,
        mfaSecret: true
      }
    })

    if (!usuario) {
      return NextResponse.json(
        { erro: 'Usu√°rio n√£o encontrado' },
        { status: 404 }
      )
    }

    if (usuario.isMfaEnabled) {
      return NextResponse.json(
        { erro: 'MFA j√° est√° ativo para este usu√°rio' },
        { status: 400 }
      )
    }

    if (!usuario.mfaSecret) {
      return NextResponse.json(
        { erro: 'MFA n√£o foi configurado. Execute POST primeiro.' },
        { status: 400 }
      )
    }

    // Descriptografar secret e verificar c√≥digo
    const { decryptData } = await import('@/lib/security')
    const secret = decryptData(usuario.mfaSecret)
    
    const isValidCode = verifyTOTP(mfaCode, secret)
    
    if (!isValidCode) {
      return NextResponse.json(
        { erro: 'C√≥digo MFA incorreto' },
        { status: 400 }
      )
    }

    // Ativar MFA
    await prisma.usuario.update({
      where: { id: session.user.id },
      data: {
        isMfaEnabled: true
      }
    })

    // Log da opera√ß√£o
    console.log(`MFA ativado para usu√°rio ${usuario.nome} (${session.user.id})`)

    return NextResponse.json({
      sucesso: true,
      mensagem: 'MFA ativado com sucesso!'
    })

  } catch (error) {
    console.error('Erro ao ativar MFA:', error)
    return NextResponse.json(
      { erro: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

// Desativar MFA (apenas admin)
export async function DELETE(request: NextRequest) {
  try {
    // Verificar autentica√ß√£o
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json(
        { erro: 'N√£o autenticado' },
        { status: 401 }
      )
    }

    // Apenas admin pode desativar MFA de outros usu√°rios
    if (session.user.cargo !== 'admin') {
      return NextResponse.json(
        { erro: 'Acesso negado. Apenas administradores podem desativar MFA.' },
        { status: 403 }
      )
    }

    const { searchParams } = new URL(request.url)
    const usuarioId = searchParams.get('userId') || session.user.id

    // Buscar usu√°rio
    const usuario = await prisma.usuario.findUnique({
      where: { id: usuarioId },
      select: {
        id: true,
        nome: true,
        isMfaEnabled: true
      }
    })

    if (!usuario) {
      return NextResponse.json(
        { erro: 'Usu√°rio n√£o encontrado' },
        { status: 404 }
      )
    }

    if (!usuario.isMfaEnabled) {
      return NextResponse.json(
        { erro: 'MFA n√£o est√° ativo para este usu√°rio' },
        { status: 400 }
      )
    }    // Desativar MFA
    await prisma.$transaction(async (tx) => {
      // Remover c√≥digos de backup
      await tx.usuarioBackupCode.deleteMany({
        where: { usuarioId: usuarioId }
      })

      // Atualizar usu√°rio
      await tx.usuario.update({
        where: { id: usuarioId },
        data: {
          isMfaEnabled: false,
          mfaSecret: null
        }
      })
    })

    // Log da opera√ß√£o
    console.log(`MFA desativado para usu√°rio ${usuario.nome} (${usuarioId}) por admin ${session.user.name} (${session.user.id})`)

    return NextResponse.json({
      sucesso: true,
      mensagem: `MFA desativado para usu√°rio ${usuario.nome}`
    })

  } catch (error) {
    console.error('Erro ao desativar MFA:', error)
    return NextResponse.json(
      { erro: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}
